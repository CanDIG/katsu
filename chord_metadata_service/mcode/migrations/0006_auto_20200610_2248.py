# Generated by Django 2.2.13 on 2020-06-11 02:48

import chord_metadata_service.restapi.models
import chord_metadata_service.restapi.validators
import datetime
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('phenopackets', '0012_auto_20200525_2116'),
        ('mcode', '0005_auto_20200519_1538'),
    ]

    operations = [
        migrations.CreateModel(
            name='CancerGeneticVariant',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the cancer genetic variant.', max_length=200, primary_key=True, serialize=False)),
                ('data_value', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The overall result of the genetic test; specifically, whether a variant is present, absent, no call, or indeterminant.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('method', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The method used to perform the genetic test.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('amino_acid_change', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The symbolic representation of an amino acid variant reported using HGVS nomenclature (pHGVS).', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('amino_acid_change_type', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The type of change related to the amino acid variant.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('cytogenetic_location', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The cytogenetic (chromosome) location.', null=True)),
                ('cytogenetic_nomenclature', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The cytogenetic (chromosome) location, represented using the International System for Human Cytogenetic Nomenclature (ISCN).', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('genomic_dna_change', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The symbolic representation of a genetic structural variant reported using HGVS nomenclature (gHGVS).', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('genomic_source_class', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The genomic class of the specimen being analyzed, for example, germline for inherited genome, somatic for cancer genome, and prenatal for fetal genome.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('variation_code', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The variation ID assigned by ClinVar.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('gene_studied', models.ManyToManyField(blank=True, help_text='A gene targeted for mutation analysis, identified in HUGO Gene Nomenclature Committee (HGNC) notation.', to='phenopackets.Gene')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='GeneticSpecimen',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the genetic specimen.', max_length=200, primary_key=True, serialize=False)),
                ('specimen_type', django.contrib.postgres.fields.jsonb.JSONField(help_text='The kind of material that forms the specimen.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('collection_body', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The anatomical collection site.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('laterality', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Body side of the collection site, if needed to distinguish from a similar location on the other side of the body.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='GenomicRegionStudied',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the genomic region studied.', max_length=200, primary_key=True, serialize=False)),
                ('dna_ranges_examined', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The range(s) of the DNA sequence examined.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('dna_region_description', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(help_text='The description for the DNA region studied in the genomics report.', max_length=100), blank=True, default=list, size=None)),
                ('gene_mutation', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The gene mutations tested for in blood or tissue by molecular genetics methods.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('gene_studied', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The ID for the gene studied.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)])),
                ('genomic_reference_sequence_id', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Range(s) of DNA sequence examined.', null=True)),
                ('genomic_region_coordinate_system', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The method of counting along the genome.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)])),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that are not supported by current schema.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.RemoveField(
            model_name='geneticvarianttested',
            name='gene_studied',
        ),
        migrations.RenameField(
            model_name='cancercondition',
            old_name='body_location_code',
            new_name='body_site',
        ),
        migrations.RenameField(
            model_name='cancercondition',
            old_name='condition_code',
            new_name='code',
        ),
        migrations.RenameField(
            model_name='cancerrelatedprocedure',
            old_name='target_body_site',
            new_name='body_site',
        ),
        migrations.RenameField(
            model_name='genomicsreport',
            old_name='test_name',
            new_name='code',
        ),
        migrations.RemoveField(
            model_name='cancerrelatedprocedure',
            name='occurence_time_or_period',
        ),
        migrations.RemoveField(
            model_name='genomicsreport',
            name='genetic_variant_found',
        ),
        migrations.RemoveField(
            model_name='genomicsreport',
            name='genetic_variant_tested',
        ),
        migrations.RemoveField(
            model_name='genomicsreport',
            name='specimen_type',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='blood_pressure_diastolic',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='blood_pressure_systolic',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='body_height',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='body_weight',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='cbc_with_auto_differential_panel',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='comprehensive_metabolic_2000',
        ),
        migrations.RemoveField(
            model_name='labsvital',
            name='tumor_marker_test',
        ),
        migrations.RemoveField(
            model_name='medicationstatement',
            name='date_time',
        ),
        migrations.AddField(
            model_name='cancercondition',
            name='laterality',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Body side of the body location, if needed to distinguish from a similar location on the other side of the body.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)]),
        ),
        migrations.AddField(
            model_name='cancercondition',
            name='verification_status',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A flag indicating whether the condition is unconfirmed, provisional, differential, confirmed, refuted, or entered-in-error.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)]),
        ),
        migrations.AddField(
            model_name='cancerrelatedprocedure',
            name='laterality',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Body side of the body location, if needed to distinguish from a similar location on the other side of the body.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)]),
        ),
        migrations.AddField(
            model_name='cancerrelatedprocedure',
            name='reason_code',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The explanation or justification for why the surgical procedure was performed.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)]),
        ),
        migrations.AddField(
            model_name='cancerrelatedprocedure',
            name='reason_reference',
            field=models.ManyToManyField(blank=True, help_text='Reference to a primary or secondary cancer condition.', to='mcode.CancerCondition'),
        ),
        migrations.AddField(
            model_name='genomicsreport',
            name='issued',
            field=models.DateTimeField(default=datetime.datetime.now, help_text='The date/time this report was issued.'),
        ),
        migrations.AddField(
            model_name='labsvital',
            name='tumor_marker_code',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=None, help_text='A code identifying the type of tumor marker test.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)]),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='labsvital',
            name='tumor_marker_data_value',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The result of a tumor marker test.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:tumor_marker_data_value', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Tumor marker data value schema.', 'properties': {'value': {'anyOf': [{'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, {'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'}, {'$id': 'chord_metadata_service:ratio', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Ratio schema.', 'properties': {'denominator': {'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'}, 'numerator': {'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'}}, 'title': 'Ratio', 'type': 'object'}]}}, 'title': 'Tumor marker data value', 'type': 'object'}, formats=None)]),
        ),
        migrations.AddField(
            model_name='mcodepacket',
            name='cancer_disease_status',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text="A clinician's qualitative judgment on the current trend of the cancer, e.g., whether it is stable, worsening (progressing), or improving (responding).", null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, formats=None)]),
        ),
        migrations.AddField(
            model_name='mcodepacket',
            name='date_of_death',
            field=models.CharField(blank=True, help_text='An indication that the patient is no longer living, given by a date of death or boolean.', max_length=200),
        ),
        migrations.AlterField(
            model_name='cancerrelatedprocedure',
            name='procedure_type',
            field=models.CharField(choices=[('radiation', 'radiation'), ('surgical', 'surgical')], help_text='Type of cancer related procedure: radiation or surgical.', max_length=200),
        ),
        migrations.DeleteModel(
            name='GeneticVariantFound',
        ),
        migrations.DeleteModel(
            name='GeneticVariantTested',
        ),
        migrations.AddField(
            model_name='genomicsreport',
            name='genetic_specimen',
            field=models.ManyToManyField(blank=True, help_text='List of related genetic specimens.', to='mcode.GeneticSpecimen'),
        ),
        migrations.AddField(
            model_name='genomicsreport',
            name='genetic_variant',
            field=models.ForeignKey(blank=True, help_text='Related genetic variant.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mcode.CancerGeneticVariant'),
        ),
        migrations.AddField(
            model_name='genomicsreport',
            name='genomic_region_studied',
            field=models.ForeignKey(blank=True, help_text='Related genomic region studied.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mcode.GenomicRegionStudied'),
        ),
    ]
