# Generated by Django 2.2.10 on 2020-03-31 22:39

import chord_metadata_service.restapi.models
import chord_metadata_service.restapi.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('phenopackets', '0004_auto_20200129_1537'),
        ('patients', '0005_auto_20200311_1610'),
    ]

    operations = [
        migrations.CreateModel(
            name='CancerCondition',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the cancer condition.', max_length=200, primary_key=True, serialize=False)),
                ('condition_type', models.CharField(choices=[('primary', 'primary'), ('secondary', 'secondary')], help_text='Cancer condition type: primary or secondary.', max_length=200)),
                ('body_location_code', django.contrib.postgres.fields.jsonb.JSONField(help_text='Code for the body location, optionally pre-coordinating laterality or direction. Accepted ontologies: SNOMED CT, ICD-O-3 and others.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'ONTOLOGY_CLASS_LIST', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'})])),
                ('clinical_status', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A flag indicating whether the condition is active or inactive, recurring, in remission, or resolved (as of the last update of the Condition). Accepted code system: http://terminology.hl7.org/CodeSystem/condition-clinical', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('condition_code', django.contrib.postgres.fields.jsonb.JSONField(help_text='A code describing the type of primary or secondary malignant neoplastic disease.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('date_of_diagnosis', models.DateTimeField(blank=True, help_text='The date the disease was first clinically recognized with sufficient certainty, regardless of whether it was fully characterized at that time.', null=True)),
                ('histology_morphology_behavior', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A description of the morphologic and behavioral characteristics of the cancer. Accepted ontologies: SNOMED CT, ICD-O-3 and others.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='CancerRelatedProcedure',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the procedure.', max_length=200, primary_key=True, serialize=False)),
                ('procedure_type', models.CharField(choices=[('radiation', 'radiation'), ('surgical', 'surgical')], help_text='Type of cancer related procedure: radion or surgical.', max_length=200)),
                ('code', django.contrib.postgres.fields.jsonb.JSONField(help_text='Code for the procedure performed.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('occurence_time_or_period', django.contrib.postgres.fields.jsonb.JSONField(help_text='The date/time that a procedure was performed.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:time_or_period', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Time of Period schema.', 'properties': {'value': {'anyOf': [{'format': 'date-time', 'type': 'string'}, {'$id': 'chord_metadata_service:period_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Period schema.', 'properties': {'end': {'format': 'date-time', 'type': 'string'}, 'start': {'format': 'date-time', 'type': 'string'}}, 'title': 'Period', 'type': 'object'}]}}, 'title': 'Time of Period', 'type': 'object'})])),
                ('target_body_site', django.contrib.postgres.fields.jsonb.JSONField(help_text='The body location(s) where the procedure was performed.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'ONTOLOGY_CLASS_LIST', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'})])),
                ('treatment_intent', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The purpose of a treatment.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='GeneticVariantFound',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the genetic variant found.', max_length=200, primary_key=True, serialize=False)),
                ('method', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology or controlled vocabulary term to identify the method used to perform the genetic test. Accepted value set: NCIT.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('variant_found_identifier', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The variation ID assigned by HGVS, for example, 360448 is the identifier for NM_005228.4(EGFR):c.-237A>G (single nucleotide variant in EGFR). Accepted value set: ClinVar.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('variant_found_hgvs_name', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Symbolic representation of the variant used in HGVS, for example, NM_005228.4(EGFR):c.-237A>G for HVGS variation ID 360448.', null=True, size=None)),
                ('variant_found_description', models.CharField(blank=True, help_text='Description of the variant.', max_length=200)),
                ('genomic_source_class', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology or controlled vocabulary term to identify the genomic class of the specimen being analyzed.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='GeneticVariantTested',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the genetic variant tested.', max_length=200, primary_key=True, serialize=False)),
                ('method', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology or controlled vocabulary term to identify the method used to perform the genetic test. Accepted value set: NCIT.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('variant_tested_identifier', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The variation ID assigned by HGVS, for example, 360448 is the identifier for NM_005228.4(EGFR):c.-237A>G (single nucleotide variant in EGFR).', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('variant_tested_hgvs_name', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Symbolic representation of the variant used in HGVS, for example, NM_005228.4(EGFR):c.-237A>G for HVGS variation ID 360448.', null=True, size=None)),
                ('variant_tested_description', models.CharField(blank=True, help_text='Description of the variant.', max_length=200)),
                ('data_value', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology or controlled vocabulary term to identify positive or negative value forthe mutation. Accepted value set: SNOMED CT.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('gene_studied', models.ForeignKey(blank=True, help_text='A gene targeted for mutation analysis, identified in HUGO Gene Nomenclature Committee (HGNC) notation.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='phenopackets.Gene')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='GenomicsReport',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the genetics report.', max_length=200, primary_key=True, serialize=False)),
                ('test_name', django.contrib.postgres.fields.jsonb.JSONField(help_text='An ontology or controlled vocabulary term to identify the laboratory test. Accepted value sets: LOINC, GTR.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('performing_organization_name', models.CharField(blank=True, help_text='The name of the organization  producing the genomics report.', max_length=200)),
                ('specimen_type', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='An ontology or controlled vocabulary term to identify the type of material the specimen contains or consists of. Accepted value set: HL7 Version 2 and Specimen Type.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('genetic_variant_found', models.ManyToManyField(blank=True, help_text='Records an alteration in the most common DNA nucleotide sequence.', to='mcode.GeneticVariantFound')),
                ('genetic_variant_tested', models.ManyToManyField(blank=True, help_text='A test for a specific mutation on a particular gene.', to='mcode.GeneticVariantTested')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='MedicationStatement',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the medication statement.', max_length=200, primary_key=True, serialize=False)),
                ('medication_code', django.contrib.postgres.fields.jsonb.JSONField(help_text='A code for medication. Accepted code systems: Medication Clinical Drug (RxNorm) and other.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('termination_reason', django.contrib.postgres.fields.jsonb.JSONField(help_text='A code explaining unplanned or premature termination of a course of medication. Accepted ontologies: SNOMED CT.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'ONTOLOGY_CLASS_LIST', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'})])),
                ('treatment_intent', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The purpose of a treatment. Accepted ontologies: SNOMED CT.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'})])),
                ('start_date', models.DateTimeField(blank=True, help_text='The start date/time of the medication.', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='The end date/time of the medication.', null=True)),
                ('date_time', models.DateTimeField(blank=True, help_text='The date/time the medication was administered.', null=True)),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='TNMStaging',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the TNM staging.', max_length=200, primary_key=True, serialize=False)),
                ('tnm_type', models.CharField(choices=[('clinical', 'clinical'), ('pathologic', 'pathologic')], help_text='TNM type: clinical or pathological.', max_length=200)),
                ('stage_group', django.contrib.postgres.fields.jsonb.JSONField(help_text='The extent of the cancer in the body, according to the TNM classification system.Accepted ontologies: SNOMED CT, AJCC and others.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:complex_ontology_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Complex object to combine data value and staging system.', 'properties': {'data_value': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'staging_system': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}}, 'required': ['data_value'], 'title': 'Complex ontology', 'type': 'object'})])),
                ('primary_tumor_category', django.contrib.postgres.fields.jsonb.JSONField(help_text='Category of the primary tumor, based on its size and extent. Accepted ontologies: SNOMED CT, AJCC and others.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:complex_ontology_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Complex object to combine data value and staging system.', 'properties': {'data_value': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'staging_system': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}}, 'required': ['data_value'], 'title': 'Complex ontology', 'type': 'object'})])),
                ('regional_nodes_category', django.contrib.postgres.fields.jsonb.JSONField(help_text='Category of the presence or absence of metastases in regional lymph nodes. Accepted ontologies: SNOMED CT, AJCC and others.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:complex_ontology_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Complex object to combine data value and staging system.', 'properties': {'data_value': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'staging_system': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}}, 'required': ['data_value'], 'title': 'Complex ontology', 'type': 'object'})])),
                ('distant_metastases_category', django.contrib.postgres.fields.jsonb.JSONField(help_text='Category describing the presence or absence of metastases in remote anatomical locations. Accepted ontologies: SNOMED CT, AJCC and others.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:complex_ontology_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Complex object to combine data value and staging system.', 'properties': {'data_value': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'staging_system': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}}, 'required': ['data_value'], 'title': 'Complex ontology', 'type': 'object'})])),
                ('cancer_condition', models.ForeignKey(help_text='Cancer condition.', on_delete=django.db.models.deletion.CASCADE, to='mcode.CancerCondition')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='MCodePacket',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the mcodepacket.', max_length=200, primary_key=True, serialize=False)),
                ('cancer_condition', models.ForeignKey(blank=True, help_text="An Individual's cancer condition.", null=True, on_delete=django.db.models.deletion.SET_NULL, to='mcode.CancerCondition')),
                ('cancer_related_procedures', models.ManyToManyField(blank=True, help_text='A radiological or surgical procedures addressing a cancer condition.', to='mcode.CancerRelatedProcedure')),
                ('genomics_report', models.ForeignKey(blank=True, help_text='A genomics report associated with an Individual.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mcode.GenomicsReport')),
                ('medication_statement', models.ForeignKey(blank=True, help_text='Medication treatment addressed to an Individual.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mcode.MedicationStatement')),
                ('subject', models.ForeignKey(help_text='An individual who is a subject of mcodepacket.', on_delete=django.db.models.deletion.CASCADE, to='patients.Individual')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='LabsVital',
            fields=[
                ('id', models.CharField(help_text='An arbitrary identifier for the labs/vital tests.', max_length=200, primary_key=True, serialize=False)),
                ('body_height', django.contrib.postgres.fields.jsonb.JSONField(help_text="The patient's height.", validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'})])),
                ('body_weight', django.contrib.postgres.fields.jsonb.JSONField(help_text="The patient's weight.", validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'})])),
                ('cbc_with_auto_differential_panel', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Reference to a laboratory observation in the CBC with Auto DifferentialPanel test.', null=True, size=None)),
                ('comprehensive_metabolic_2000', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Reference to a laboratory observation in the CMP 2000 test.', null=True, size=None)),
                ('blood_pressure_diastolic', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The blood pressure after the contraction of the heart while the chambers of the heart refill with blood, when the pressure is lowest.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'})])),
                ('blood_pressure_systolic', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The blood pressure during the contraction of the left ventricle of the heart, when blood pressure is at its highest.', null=True, validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'})])),
                ('tumor_marker_test', django.contrib.postgres.fields.jsonb.JSONField(help_text='An ontology or controlled vocabulary term to identify tumor marker test.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:tumor_marker_test', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Tumor marker test schema.', 'properties': {'code': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'data_value': {'anyOf': [{'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'todo', 'properties': {'id': {'description': 'CURIE style identifier.', 'type': 'string'}, 'label': {'description': 'Human-readable class name.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, {'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'}, {'$id': 'chord_metadata_service:ratio', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Ratio schema.', 'properties': {'denominator': {'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'}, 'numerator': {'$id': 'chord_metadata_service:quantity_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'Schema for the datatype Quantity.', 'properties': {'code': {'type': 'string'}, 'comparator': {'enum': ['<', '>', '<=', '>=', '=']}, 'system': {'format': 'uri', 'type': 'string'}, 'unit': {'type': 'string'}, 'value': {'type': 'number'}}, 'title': 'Quantity schema', 'type': 'object'}}, 'title': 'Ratio', 'type': 'object'}]}}, 'required': ['code'], 'title': 'Tumor marker test', 'type': 'object'})])),
                ('individual', models.ForeignKey(help_text='The individual who is the subject of the tests.', on_delete=django.db.models.deletion.CASCADE, to='patients.Individual')),
            ],
            options={
                'ordering': ['id'],
            },
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
    ]
