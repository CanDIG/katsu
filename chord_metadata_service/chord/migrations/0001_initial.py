# Generated by Django 2.2.8 on 2019-12-10 21:04

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('data_use', django.contrib.postgres.fields.jsonb.JSONField()),
                ('alternate_identifiers', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='Alternate identifiers for the dataset.', null=True, size=None)),
                ('related_identifiers', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='Related identifiers for the dataset.', null=True, size=None)),
                ('dates', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='Relevant dates for the datasets, a date must be added, e.g. creation date or last modification date should be added.', null=True, size=None)),
                ('stored_in', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The data repository hosting the dataset.', null=True)),
                ('spatial_coverage', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The geographical extension and span covered by the dataset and its measured dimensions/variables.', null=True, size=None)),
                ('types', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='A term, ideally from a controlled terminology, identifying the dataset type or nature of the data, placing it in a typology.', null=True, size=None)),
                ('availability', models.CharField(blank=True, help_text='A qualifier indicating the different types of availability for a dataset (available, unavailable, embargoed, available with restriction, information not available).', max_length=200)),
                ('refinement', models.CharField(blank=True, help_text='A qualifier to describe the level of data processing of the dataset and its distributions.', max_length=200)),
                ('aggregation', models.CharField(blank=True, help_text="A qualifier indicating if the entity represents an 'instance of dataset' or a 'collection of datasets'.", max_length=200)),
                ('privacy', models.CharField(blank=True, help_text='A qualifier to describe the data protection applied to the dataset. This is relevant for clinical data.', max_length=200)),
                ('distributions', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The distribution(s) by which datasets are made available (for example: mySQL dump).', null=True, size=None)),
                ('dimensions', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The different dimensions (granular components) making up a dataset.', null=True, size=None)),
                ('primary_publications', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The primary publication(s) associated with the dataset, usually describing how the dataset was produced.', null=True, size=None)),
                ('citations', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The publication(s) that cite this dataset.', null=True, size=None)),
                ('citation_count', models.IntegerField(blank=True, help_text='The number of publications that cite this dataset (enumerated in the citations property).', null=True)),
                ('produced_by', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='A study process which generated a given dataset, if any.', null=True)),
                ('creators', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The person(s) or organization(s) which contributed to the creation of the dataset.', null=True, size=None)),
                ('licenses', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The terms of use of the dataset.', null=True, size=None)),
                ('acknowledges', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='The grant(s) which funded and supported the work reported by the dataset.', null=True, size=None)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True), blank=True, help_text='Tags associated with the dataset, which will help in its discovery.', null=True, size=None)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Extra properties that do not fit in the previous specified attributes.', null=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('identifier', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TableOwnership',
            fields=[
                ('table_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('service_id', models.UUIDField()),
                ('service_artifact', models.CharField(default='', max_length=200)),
                ('data_type', models.CharField(max_length=200)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='table_ownerships', to='chord.Dataset')),
            ],
        ),
    ]
