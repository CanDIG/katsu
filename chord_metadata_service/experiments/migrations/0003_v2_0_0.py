# Generated by Django 2.2.20 on 2021-06-29 01:13

import chord_metadata_service.restapi.models
import chord_metadata_service.restapi.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('experiments', '0002_v1_3_5'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExperimentResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(blank=True, help_text='An arbitrary identifier for an experiment result.', max_length=200, null=True)),
                ('description', models.CharField(blank=True, help_text='Description of an experiment result.', max_length=500, null=True)),
                ('filename', models.CharField(blank=True, help_text='The name of the file containing the result.', max_length=500, null=True)),
                ('file_format', models.CharField(blank=True, choices=[('SAM', 'SAM'), ('BAM', 'BAM'), ('CRAM', 'CRAM'), ('BAI', 'BAI'), ('CRAI', 'CRAI'), ('VCF', 'VCF'), ('BCF', 'BCF'), ('GVCF', 'GVCF'), ('BigWig', 'BigWig'), ('BigBed', 'BigBed'), ('FASTA', 'FASTA'), ('FASTQ', 'FASTQ'), ('TAB', 'TAB'), ('SRA', 'SRA'), ('SRF', 'SRF'), ('SFF', 'SFF'), ('GFF', 'GFF'), ('TABIX', 'TABIX'), ('UNKNOWN', 'UNKNOWN'), ('OTHER', 'OTHER')], help_text='(Controlled Vocabulary) File format.', max_length=50, null=True)),
                ('data_output_type', models.CharField(blank=True, choices=[('Raw data', 'Raw data'), ('Derived data', 'Derived data')], help_text='The type of data output: Raw or Derived data.Raw data - the data output type that can be converted back to the original result set. Derived data - the data output type that cannot be converted back to the original result set.', max_length=50, null=True)),
                ('usage', models.CharField(blank=True, help_text='Internal to the Bento: describe how data is used within Bento (visualized or can be downloaded).', max_length=200, null=True)),
                ('creation_date', models.CharField(blank=True, help_text='The date when the experiment result file was created.', max_length=500, null=True)),
                ('created_by', models.CharField(blank=True, help_text='Name/Username/Code of the person who prepared the sequencing data.', max_length=200, null=True)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Extra properties that are not supported by current schema.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:key_value_object_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'The schema represents a key-value object.', 'patternProperties': {'^.*$': {'type': 'string'}}, 'title': 'Key-value object', 'type': 'object'}, formats=None)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(blank=True, help_text='An arbitrary identifier for an experiment result.', max_length=200, null=True)),
                ('platform', models.CharField(blank=True, help_text='The instrument name. E.g. Illumina, Oxford Nanopore.', max_length=200, null=True)),
                ('description', models.CharField(blank=True, help_text='Description of the instrument.', max_length=500, null=True)),
                ('model', models.CharField(blank=True, help_text='The specific model of the instrument.', max_length=500, null=True)),
                ('extra_properties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Extra properties that are not supported by current schema.', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:key_value_object_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'The schema represents a key-value object.', 'patternProperties': {'^.*$': {'type': 'string'}}, 'title': 'Key-value object', 'type': 'object'}, formats=None)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            bases=(models.Model, chord_metadata_service.restapi.models.IndexableMixin),
        ),
        migrations.RemoveField(
            model_name='experiment',
            name='file_location',
        ),
        migrations.AddField(
            model_name='experiment',
            name='created',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='experiment',
            name='library_layout',
            field=models.CharField(blank=True, help_text='The library layout. E.g. Single, Paired.', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='experiment',
            name='library_selection',
            field=models.CharField(blank=True, help_text='Method used to enrich the target in the sequence library preparation. E.g. Random, PCR, Random PCR, RT-PCR, MF and other.', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='experiment',
            name='library_source',
            field=models.CharField(blank=True, help_text='The type of source material that is being sequenced. E.g. Genomic, Genomic Single Cell,Transcriptomic, Transcriptomic Single Cell, Metagenomic, Metatranscriptomic, Synthetic,Viral RNA, Other.', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='experiment',
            name='study_type',
            field=models.CharField(blank=True, help_text='Which study type the experiment belongs to.E.g. Epigenomics, Proteomics, Metagenomics, Transcriptomics, Metabolomics.', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='experiment',
            name='updated',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='experiment',
            name='experiment_ontology',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Links to experiment ontology information (e.g. via the OBI ontology.).', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)]),
        ),
        migrations.AlterField(
            model_name='experiment',
            name='experiment_type',
            field=models.CharField(help_text='(Controlled Vocabulary) The assay target (e.g. DNA Methylation, mRNA-Seq, smRNA-Seq, Histone H3K4me1, etc.).', max_length=200),
        ),
        migrations.AlterField(
            model_name='experiment',
            name='library_strategy',
            field=models.CharField(blank=True, help_text='(Controlled Vocabulary) The assay used. These are defined within the SRA metadata specifications with a controlled vocabulary (e.g. Bisulfite-Seq, RNA-Seq, ChIP-Seq). For a complete list, see https://www.ebi.ac.uk/ena/submit/reads-library-strategy.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='experiment',
            name='molecule_ontology',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Links to molecule ontology information (e.g. via the SO ontology.).', validators=[chord_metadata_service.restapi.validators.JsonSchemaValidator({'$id': 'chord_metadata_service:ontology_class_list_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Ontology class list', 'items': {'$id': 'chord_metadata_service:ontology_class_schema', '$schema': 'http://json-schema.org/draft-07/schema#', 'additionalProperties': False, 'description': 'An ontology term.', 'help': 'An ontology term.', 'properties': {'id': {'description': 'A CURIE-style identifier for an ontology term.', 'help': 'A CURIE-style identifier for an ontology term.', 'type': 'string'}, 'label': {'description': 'A human readable class name for an ontology term.', 'help': 'A human readable class name for an ontology term.', 'type': 'string'}}, 'required': ['id', 'label'], 'title': 'Ontology class schema', 'type': 'object'}, 'title': 'Ontology class list', 'type': 'array'}, formats=None)]),
        ),
        migrations.AlterField(
            model_name='experiment',
            name='qc_flags',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(help_text='Any quality control observations can be noted here. This field can be omitted if empty.', max_length=200), blank=True, default=list, size=None),
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_results',
            field=models.ManyToManyField(blank=True, help_text='Related files containing the analysis of sequencing data.', to='experiments.ExperimentResult'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='instrument',
            field=models.ForeignKey(blank=True, help_text='The instrument used to sequence the biological specimens.', null=True, on_delete=django.db.models.deletion.CASCADE, to='experiments.Instrument'),
        ),
    ]
