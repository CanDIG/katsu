name: Docs

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggered based on the git event type
  pull_request:
    types: [review_requested, ready_for_review]

    
jobs:
  generate-moh-schema:
    name: Update MoH schema
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: python -m pip install -r requirements/dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create package.json file
        run: |
          echo '{"name": "my-project", "version": "1.0.0"}' > package.json

      - name: Install npm
        run: npm install

      - name: Install widdershins
        run: npm install -g widdershins

      - name: Generate new schema.json
        run: python manage.py export_openapi_schema --api chord_metadata_service.mohpackets.apis.core.api | python -m json.tool > chord_metadata_service/mohpackets/docs/schema.json

      - name: Convert schema to OpenAPI documentation
        run: |
          npx widdershins ./chord_metadata_service/mohpackets/docs/schema.json -o ./chord_metadata_service/mohpackets/docs/openapi.md -u ./chord_metadata_service/mohpackets/docs/widdershins/templates/openapi3 -c true --omitHeader true

      - name: Install octokit/rest
        run: npm install @octokit/rest

      - name: Update schema.json and openapi.md
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ request: { fetch: fetch, }, auth: "${{ secrets.GITHUB_TOKEN }}" });

            // get SHA from each file
            const repoPath = 'chord_metadata_service/mohpackets/docs/';
            const getFileSha = async (path) => {
              const { data } = await octokit.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: `${repoPath}${path}`,
                ref: `${{ github.head_ref }}`
              });
              return data.sha;
            }

            // get last commit sha for repo
            const getRepoSha = async () => {
              const { data } = await octokit.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `${{ github.head_ref }}`
              });
              return data.sha;
            }

            const schemaSha = await getFileSha('schema.json');
            const openApiSha = await getFileSha('openapi.md');
            const repoSha = await getRepoSha();

            // Read the content of updated files
            let schemaJson = fs.readFileSync(`./${repoPath}schema.json`, 'utf8');
            const openApiMd = fs.readFileSync(`./${repoPath}openapi.md`, 'utf8');

            // Update description to include sha of
            let schemaLines = schemaJson.split('\n');
            for (let i = 0; i < 10; ++i) {
              let descStr = '"description": "This is the RESTful API for the MoH Service."';
              let textLink = 'Based on https://raw.githubusercontent.com/' + context.repo.owner + '/' + context.repo.repo + '/' + repoSha + '/' + repoPath + 'schema.json';
              if (descStr === schemaLines[i].trim()) {
              schemaLines[i] = `"description": "This is the RESTful API for the MoH Service. ${textLink}"`;

              }
            }
            schemaJson = schemaLines.join('\n');
            fs.writeFileSync(`./${repoPath}schema.json`, schemaJson, 'utf8');

            // Commit and push changes
            await octokit.request(`PUT /repos/{owner}/{repo}/contents/${repoPath}{path}`, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'schema.json',
              message: 'Update schema.json',
              content: Buffer.from(schemaJson).toString('base64'),
              sha: schemaSha,
              branch: `${{ github.head_ref }}`
            });

            await octokit.request(`PUT /repos/{owner}/{repo}/contents/${repoPath}{path}`, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'openapi.md',
              message: 'Update openapi.md',
              content: Buffer.from(openApiMd).toString('base64'),
              sha: openApiSha,
              branch: `${{ github.head_ref }}`
            });




