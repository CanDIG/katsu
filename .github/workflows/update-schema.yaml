name: Docs

on:
  # pull_request:
  #   types: [review_requested, ready_for_review]
  push:


jobs:
  generate-moh-schema:
    name: Update MoH schema
    runs-on: ubuntu-latest
    steps:
      # - name: Check out repo
      #   uses: actions/checkout@v3
      #   with:
      #     submodules: true

      # - name: Install Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: "3.10"

      # - name: Install dependencies
      #   run: python -m pip install -r requirements-candig-dev.txt

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '16'

      # - name: Create package.json file
      #   run: |
      #     echo '{"name": "my-project", "version": "1.0.0"}' > package.json
          
      # - name: Install npm
      #   run: npm install
      
      # - name: Install widdershins
      #   run: npm install -g widdershins

      # - name: Generate new schema.yml
      #   run: python manage.py spectacular --file ./chord_metadata_service/mohpackets/docs/schema.yml --validate --fail-on-warn

      # - name: Convert schema to OpenAPI documentation
      #   run: |
      #     npx widdershins ./chord_metadata_service/mohpackets/docs/schema.yml -o ./chord_metadata_service/mohpackets/docs/openapi.md -u ./chord_metadata_service/mohpackets/docs/widdershins/templates/openapi3 -c true --omitHeader true
      
      # - name: Install octokit/rest
      #   run: npm install @octokit/rest

      - name: Print GitHub Action properties
        run: |
          echo "GitHub Action properties:"
          echo "  github.actor: ${GITHUB_ACTOR}"
          echo "  github.event_name: ${GITHUB_EVENT_NAME}"
          echo "  github.repository: ${GITHUB_REPOSITORY}"
          echo "  github.event_path: ${GITHUB_EVENT_PATH}"
          echo "  github.workspace: ${GITHUB_WORKSPACE}"
          echo "  github.sha: ${GITHUB_SHA}"
          echo "  github.ref: ${GITHUB_REF}"
          echo "  github.ref_name: ${GITHUB_REF_NAME}"
          echo "  github.head_ref: ${GITHUB_HEAD_REF}"
          echo "  github.base_ref: ${GITHUB_BASE_REF}"
          echo "  github.event.inputs: ${GITHUB_EVENT_INPUTS}"
          echo "  github.event.number: ${GITHUB_EVENT_NUMBER}"
          echo "  github.event.pull_request.number: ${GITHUB_EVENT_PULL_REQUEST_NUMBER}"
          echo "  github.event.pull_request.head.ref: ${GITHUB_EVENT_PULL_REQUEST_HEAD_REF}"
          echo "  github.event.pull_request.base.ref: ${GITHUB_EVENT_PULL_REQUEST_BASE_REF}"
          echo "  github.token: ${GITHUB_TOKEN}"



      # - name: Update schema.yml and openapi.md
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const { Octokit } = require('@octokit/rest');
      #       const octokit = new Octokit({ auth: "${{ secrets.GITHUB_TOKEN }}" });

      #       // get SHA from each file
      #       const repoPath = 'chord_metadata_service/mohpackets/docs/';
      #       const getFileSha = async (path) => {
      #         const { data } = await octokit.repos.getContent({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           path: `${repoPath}${path}`,
      #           ref: context.ref_name
      #         });
      #         return data.sha;
      #       }
            
      #       const schemaSha = await getFileSha('schema.yml');
      #       const openApiSha = await getFileSha('openapi.md');

      #       // Read the content of updated files
      #       const schemaYml = fs.readFileSync(`./${repoPath}schema.yml`, 'utf8');
      #       const openApiMd = fs.readFileSync(`./${repoPath}openapi.md`, 'utf8');

      #       // Commit and push changes
      #       await octokit.request(`PUT /repos/{owner}/{repo}/contents/${repoPath}{path}`, {
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         path: 'schema.yml',
      #         message: 'Update schema.yml',
      #         content: Buffer.from(schemaYml).toString('base64'),
      #         sha: schemaSha,
      #         branch: context.ref_name
      #       });

      #       await octokit.request(`PUT /repos/{owner}/{repo}/contents/${repoPath}{path}`, {
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         path: 'openapi.md',
      #         message: 'Update openapi.md',
      #         content: Buffer.from(openApiMd).toString('base64'),
      #         sha: openApiSha,
      #         branch: context.ref_name
      #       });

          


